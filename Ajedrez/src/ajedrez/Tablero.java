/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ajedrez;

import java.awt.Button;
import java.awt.GridLayout;
import java.awt.HeadlessException;
import javax.swing.JPanel;
import Piezas.*;
import java.awt.Color;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JOptionPane;

/**
 *
 * @author Asus Pc
 */
public class Tablero extends javax.swing.JFrame implements ActionListener {

    int i = 0;
    int x = 0;
    /**
     * Creates new form Tablero
     */

    boton[][] botones = new boton[8][8];
    int filas = 8;
    int columnas = 8;

    int cols1;
    int fila1;
    int cols2;
    int fila2;

    ImageIcon actual;

    public Tablero() {
        initComponents();
        Botones();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        Tabla = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        javax.swing.GroupLayout TablaLayout = new javax.swing.GroupLayout(Tabla);
        Tabla.setLayout(TablaLayout);
        TablaLayout.setHorizontalGroup(
            TablaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1055, Short.MAX_VALUE)
        );
        TablaLayout.setVerticalGroup(
            TablaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 834, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(Tabla, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(Tabla, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Tablero.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Tablero.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Tablero.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Tablero.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Tablero().setVisible(true);
            }
        });
    }

    public void Botones() {

        for (int i = 0; i < botones.length; i++) {
            for (int j = 0; j < botones[0].length; j++) {
                botones[i][j] = new boton(100 * j, 100 * i, 100, 100, this);
                botones[i][j].addActionListener(this);
                botones[i][j].CambiarNombre(i, j);
                Tabla.add(botones[i][j]);
            }
        }

        botones[0][0].setIcon(new ImageIcon("./PiezasImagenes/Negro_Torre.png"));
        botones[0][1].setIcon(new ImageIcon("./PiezasImagenes/Negro_caballito_de_palo.png"));
        botones[0][2].setIcon(new ImageIcon("./PiezasImagenes/Negro_alfil.png"));
        botones[0][3].setIcon(new ImageIcon("./PiezasImagenes/Negro_reina.png"));
        botones[0][4].setIcon(new ImageIcon("./PiezasImagenes/negro_rey.png"));
        botones[0][5].setIcon(new ImageIcon("./PiezasImagenes/Negro_alfil.png"));
        botones[0][6].setIcon(new ImageIcon("./PiezasImagenes/Negro_caballito_de_palo.png"));
        botones[0][7].setIcon(new ImageIcon("./PiezasImagenes/Negro_Torre.png"));
        botones[1][0].setIcon(new ImageIcon("./PiezasImagenes/Negro_peon.png"));
        botones[1][1].setIcon(new ImageIcon("./PiezasImagenes/Negro_peon.png"));
        botones[1][2].setIcon(new ImageIcon("./PiezasImagenes/Negro_peon.png"));
        botones[1][3].setIcon(new ImageIcon("./PiezasImagenes/Negro_peon.png"));
        botones[1][4].setIcon(new ImageIcon("./PiezasImagenes/Negro_peon.png"));
        botones[1][5].setIcon(new ImageIcon("./PiezasImagenes/Negro_peon.png"));
        botones[1][6].setIcon(new ImageIcon("./PiezasImagenes/Negro_peon.png"));
        botones[1][7].setIcon(new ImageIcon("./PiezasImagenes/Negro_peon.png"));

        /**
         * ***-----------------------------**
         */
        botones[7][0].setIcon(new ImageIcon("./PiezasImagenes/Blanco_Torre.png"));
        botones[7][1].setIcon(new ImageIcon("./PiezasImagenes/Blanco_caballito_de_palo.png"));
        botones[7][2].setIcon(new ImageIcon("./PiezasImagenes/Blanco_alfil.png"));
        botones[7][3].setIcon(new ImageIcon("./PiezasImagenes/Blanco_reina.png"));
        botones[7][4].setIcon(new ImageIcon("./PiezasImagenes/Blanco_rey.png"));
        botones[7][5].setIcon(new ImageIcon("./PiezasImagenes/Blanco_alfil.png"));
        botones[7][6].setIcon(new ImageIcon("./PiezasImagenes/Blanco_caballito_de_palo.png"));
        botones[7][7].setIcon(new ImageIcon("./PiezasImagenes/Blanco_Torre.png"));
        botones[6][0].setIcon(new ImageIcon("./PiezasImagenes/Blanco_peon.png"));
        botones[6][1].setIcon(new ImageIcon("./PiezasImagenes/Blanco_peon.png"));
        botones[6][2].setIcon(new ImageIcon("./PiezasImagenes/Blanco_peon.png"));
        botones[6][3].setIcon(new ImageIcon("./PiezasImagenes/Blanco_peon.png"));
        botones[6][4].setIcon(new ImageIcon("./PiezasImagenes/Blanco_peon.png"));
        botones[6][5].setIcon(new ImageIcon("./PiezasImagenes/Blanco_peon.png"));
        botones[6][6].setIcon(new ImageIcon("./PiezasImagenes/Blanco_peon.png"));
        botones[6][7].setIcon(new ImageIcon("./PiezasImagenes/Blanco_peon.png"));

        botones[0][0].setPieza(new Torre("negra"));
        botones[0][1].setPieza(new Caballo("negra"));
        botones[0][2].setPieza(new Alfil("negra"));
        botones[0][3].setPieza(new Reina("negra"));
        botones[0][4].setPieza(new Rey("negra"));
        botones[0][5].setPieza(new Alfil("negra"));
        botones[0][6].setPieza(new Caballo("negra"));
        botones[0][7].setPieza(new Torre("negra"));
        botones[1][0].setPieza(new Peon("negra"));
        botones[1][1].setPieza(new Peon("negra"));
        botones[1][2].setPieza(new Peon("negra"));
        botones[1][3].setPieza(new Peon("negra"));
        botones[1][4].setPieza(new Peon("negra"));
        botones[1][5].setPieza(new Peon("negra"));
        botones[1][6].setPieza(new Peon("negra"));
        botones[1][7].setPieza(new Peon("negra"));

        botones[7][0].setPieza(new Torre("blanca"));
        botones[7][1].setPieza(new Caballo("blanca"));
        botones[7][2].setPieza(new Alfil("blanca"));
        botones[7][3].setPieza(new Reina("blanca"));
        botones[7][4].setPieza(new Rey("blanca"));
        botones[7][5].setPieza(new Alfil("blanca"));
        botones[7][6].setPieza(new Caballo("blanca"));
        botones[7][7].setPieza(new Torre("blanca"));
        botones[6][0].setPieza(new Peon("blanca"));
        botones[6][1].setPieza(new Peon("blanca"));
        botones[6][2].setPieza(new Peon("blanca"));
        botones[6][3].setPieza(new Peon("blanca"));
        botones[6][4].setPieza(new Peon("blanca"));
        botones[6][5].setPieza(new Peon("blanca"));
        botones[6][6].setPieza(new Peon("blanca"));
        botones[6][7].setPieza(new Peon("blanca"));

    }

    public void jugadas() {
        //int i = 0;
        boolean ganador = false;

        System.out.println("");

        while (ganador == false) {

            // i++;
        }

    }

    public ImageIcon getActual() {
        return actual;
    }

    public void setActual(ImageIcon actual) {
        this.actual = actual;
    }

    public void movimiento() {

    }

    public int getCols1() {
        return cols1;
    }

    public void setCols1(int cols1) {
        this.cols1 = cols1;
    }

    public int getFila1() {
        return fila1;
    }

    public void setFila1(int fila1) {
        this.fila1 = fila1;
    }

    public int getCols2() {
        return cols2;
    }

    public void setCols2(int cols2) {
        this.cols2 = cols2;
    }

    public int getFila2() {
        return fila2;
    }

    public void setFila2(int fila3) {
        this.fila2 = fila3;
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel Tabla;
    // End of variables declaration//GEN-END:variables

    @Override
    public void actionPerformed(ActionEvent e) {

        int cols;
        int filas;

        if (i % 2 == 0) {
            if (e.getSource() instanceof JButton) {
                JButton temp = (JButton) e.getSource();

                if (temp.getIcon() == null) {
                    JOptionPane.showMessageDialog(this, "Persione una casilla que contenga una pieza");
                    // i = 0;

                } else {

                    String[] t = temp.getName().split(",");
                    setFila1(Integer.parseInt(t[0]));
                    setCols1(Integer.parseInt(t[1]));

                    //System.out.println(t[0]);
                    //System.out.println(t[1]);
                    if (x % 2 == 0 && botones[getFila1()][getCols1()].pieza.getColor().equals("negra")) {
                        JOptionPane.showMessageDialog(this, "es el turno de las blancas");

                    } else if (x % 2 != 0 && botones[getFila1()][getCols1()].pieza.getColor().equals("blanca")) {
                        JOptionPane.showMessageDialog(this, "es el turno de las negras");

                    } else {
                        setActual((ImageIcon) temp.getIcon());
                        i++;

                    }

                }
            }
        } else if (e.getSource() instanceof JButton) {
            JButton temp = (JButton) e.getSource();

            String[] t = temp.getName().split(",");
            setFila2(Integer.parseInt(t[0]));
            setCols2(Integer.parseInt(t[1]));

            //System.out.println(t[0]);
            //System.out.println(t[1]);
            if (getCols1() == getCols2() && getFila1() == getFila2()) {
                i = 0;
            } else if (botones[getFila1()][getCols1()].getPieza().movimiento(getFila1(), getCols1(), getFila2(), getCols2()) == false) {
                i = 0;
                JOptionPane.showMessageDialog(this, "Movimiento de Pieza Incorreto");
            } else if (botones[getFila1()][getCols1()].getPieza().getColor().equals(botones[getFila2()][getCols2()].getPieza().getColor())) {
                i = 0;
                JOptionPane.showMessageDialog(this, "Las fichas del mismo color no se pueden comer ");
            } else if (Horizontal(getFila1(), getCols1(), getFila2(), getCols2()) == false || Vertival(getFila1(), getCols1(), getFila2(), getCols2()) == false || Digonal(getFila1(), getCols1(), getFila2(), getCols2()) == false) {

                i = 0;
                JOptionPane.showMessageDialog(this, "Esta no puede saltear piezas");
            } else {
                temp.setIcon(getActual());
                botones[getFila2()][getCols2()].setPieza(botones[getFila1()][getCols1()].getPieza());
                botones[getFila1()][getCols1()].setPieza(new Pieza());

                botones[getFila1()][getCols1()].setIcon(null);
                i++;

            }

        }

        if (i == 2) {
            x++;
            i = 0;
        }

    }

    public boolean Horizontal(int f1, int c1, int f2, int c2) {
        int piezita = 0;
        boolean seguir = true;

        if (f1 == f2) {

            if (c1 < c2) {
                for (int j = c1; j < c2; j++) {
                    if (botones[f1][j].getIcon() == null) {

                    } else {

                        piezita++;

                    }

                }

            } else {
                for (int j = c1; j > c2; j--) {
                    if (botones[f1][j].getIcon() == null) {

                    } else {

                        piezita++;
                    }

                }

            }

            if (piezita > 1) {
                seguir = false;
            }

        }

        return seguir;
    }

    public boolean Digonal(int f1, int c1, int f2, int c2) {
        int piezita = 0;
        boolean seguir = true;

        try {
            if ((Math.abs(f1 - f2)) == (Math.abs(c1 - c2))) {

                if (f1 < f2) {
                    for (int j = 0; j < (Math.abs(f1 - f2)); j++) {
                        if (botones[f1 + j][c1 + j].getIcon() == null) {
                            //System.out.println(f1+ "--" + f2);
                            //System.out.println(botones[j][j].getPieza());
                        } else {

                            piezita++;

                            System.out.println(piezita);
                        }

                    }

                } else {
                    for (int j = ((Math.abs(f1 - f2)) - 1); j >= 0; j--) {
                        if (botones[f1 - j][c1 - j].getIcon() == null) {

                            // System.out.println((f1-j )+ " == " + (c1-j));
                        } else {
                            //System.out.println("2");
                            System.out.println((f1 - j) + " == " + (c1 - j));
                            piezita++;
                        }

                    }

                }

                System.out.println(piezita);
                if (piezita > 1) {
                    seguir = false;
                }

            }
        } catch (Exception e) {
            seguir = true;

        }

        return seguir;

    }

    public boolean Vertival(int f1, int c1, int f2, int c2) {

        int piezita = 0;
        boolean seguir = true;

        if (c1 == c2) {

            // System.out.println("vetical");
            if (f1 < f2) {
                for (int j = f1; j < f2; j++) {
                    if (botones[j][c1].getIcon() == null) {
                        System.out.println(".");
                    } else {

                        piezita++;

                    }

                }

            } else {
                for (int j = f1; j > f2; j--) {
                    if (botones[j][c1].getIcon() == null) {

                        System.out.println(botones[j][c1].getPieza());

                    } else {

                        piezita++;
                    }

                }

            }

            if (piezita > 1) {
                seguir = false;
            }

        }

        return seguir;

    }
}
